[{"title":"extend-kubeskoop","type":0,"sectionRef":"#","url":"/docs/contribute/extend-kubeskoop","content":"extend-kubeskoop","keywords":""},{"title":"Cloud Providers","type":0,"sectionRef":"#","url":"/docs/guide/diagnose/cloud-providers","content":"Cloud Providers","keywords":""},{"title":"Command line arguments","type":0,"sectionRef":"#","url":"/docs/guide/diagnose/command-line-arguments","content":"Command line arguments The following command line arguments are provided by kubeskoop cli. Argument\tDescription-s, --src\tsource address for the network problem -d, --dst\tdestination address for the network problem -p, --dport\tdestination port for the network problem --protocol\tprotocol for the network problem (default tcp) --cloud-provider\tcloud provider of cluster (default generic) --collector-image\timage used for collector. (default registry.cn-hangzhou.aliyuncs.com/kubeskoop/kubeskoop:&lt;version&gt;) --collector-namespace\tnamespace where collector pods in. (default kubeskoop) --collector-pod-wait-interval\tpod running check interval (default 2s) --collector-pod-wait-timeout\tpod running check timeout (default 2m0s) --format\tgraph output format, support dot/svg. If not set, only print simple path info on console. --output\toutput file name, default is output.dot/svg in current work directory. --kube-config\tcluster kubeconfig file (default ~/.kube/config) --http\tenable an http server to show diagnose result. --http-address\tlisten address for http server. (default 127.0.0.1:8080) --aliyun-access-key-id\taccess key for aliyun provider --aliyun-access-key-secret\taccess secret for aliyun provider --aliyun-security-token\tsecurity token for aliyun provider","keywords":""},{"title":"Intro","type":0,"sectionRef":"#","url":"/docs/guide/diagnose/intro","content":"","keywords":""},{"title":"How it works​","type":1,"pageTitle":"Intro","url":"/docs/guide/diagnose/intro#how-it-works","content":""},{"title":"Limitations​","type":1,"pageTitle":"Intro","url":"/docs/guide/diagnose/intro#limitations","content":""},{"title":"Network Plugins","type":0,"sectionRef":"#","url":"/docs/guide/diagnose/network-plugins","content":"Network Plugins","keywords":""},{"title":"HTTP Server","type":0,"sectionRef":"#","url":"/docs/guide/diagnose/web-ui","content":"HTTP Server","keywords":""},{"title":"First Blog Post","type":0,"sectionRef":"#","url":"/blog/first-blog-post","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"Long Blog Post","type":0,"sectionRef":"#","url":"/blog/long-blog-post","content":"This is the summary of a very long blog post, Use a &lt;!-- truncate --&gt; comment to limit blog post size in the list view. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","keywords":""},{"title":"Output Format","type":0,"sectionRef":"#","url":"/docs/guide/diagnose/output-format","content":"Output Format","keywords":""},{"title":"Welcome","type":0,"sectionRef":"#","url":"/blog/welcome","content":"Docusaurus blogging features are powered by the blog plugin. Simply add Markdown files (or folders) to the blog directory. Regular blog authors can be added to authors.yml. The blog post date can be extracted from filenames, such as: 2019-05-30-welcome.md2019-05-30-welcome/index.md A blog post folder can be convenient to co-locate blog post images: The blog supports tags as well! And if you don't want a blog: just delete this directory, and use blog: false in your Docusaurus config.","keywords":""},{"title":"Roadmap","type":0,"sectionRef":"#","url":"/docs/roadmap","content":"Roadmap kubeskoop roadmap","keywords":""},{"title":"MDX Blog Post","type":0,"sectionRef":"#","url":"/blog/mdx-blog-post","content":"Blog posts support Docusaurus Markdown features, such as MDX. tip Use the power of React to create interactive blog posts. &lt;button onClick={() =&gt; alert('button clicked!')}&gt;Click me!&lt;/button&gt; Click me!","keywords":""},{"title":"KubeSkoop exporter 可视化配置","type":0,"sectionRef":"#","url":"/docs/guide/exporter/exporter-visualization-guide","content":"","keywords":""},{"title":"使用 Prometheus & Grafana 进行指标的可视化​","type":1,"pageTitle":"KubeSkoop exporter 可视化配置","url":"/docs/guide/exporter/exporter-visualization-guide#使用-prometheus--grafana-进行指标的可视化","content":"KubeSkoop exporter提供了标准的Prometheus格式的指标输出服务，您可以快速将KubeSkoop exporter的监控信息集成到已有的监控系统中，请参考 配置 。 如果没有就绪的监控服务，请参考 安装 搭建可视化的监控服务。 "},{"title":"安装​","type":1,"pageTitle":"KubeSkoop exporter 可视化配置","url":"/docs/guide/exporter/exporter-visualization-guide#安装","content":"参考 Prometheus 的安装 完成Prometheus的部署安装。 参考 Grafana 的安装 完成Grafana的安装并配置与Prometheus的连接。 "},{"title":"配置KubeSkoop exporter指标监控​","type":1,"pageTitle":"KubeSkoop exporter 可视化配置","url":"/docs/guide/exporter/exporter-visualization-guide#配置kubeskoop-exporter指标监控","content":"KubeSkoop exporter支持运行在kubernetes中的prometheus的服务发现功能，在安装完成prometheus之后，可以通过Status-&gt;Targets页面，在搜索栏中输入skoop-exporter，查看已经就绪的实例:  在KubeSkoop exporter实例被prometheus正常捕获后，可以通过以下步骤完成指标的可视化操作： 进入Grafana的控制台，点击Configuration-&gt;Data sources-&gt;Add data source后选择Prometheus，将已经就绪的prometheus实例的地址添加到Grafana的数据源订阅中:新建一个大盘，或者在已有大盘中选择新建一个面板，在面板的配置中选取数据源为1中配置的数据源，并在Metric browser中输入inspector，即可看到联想后的KubeSkoop exporter指标，选取其中需要的信息，以inspector_pod_netdevrxbytes为例，输入完成后，可以在面板中看到获取到的数据。在指标的可视化中，可以根据需要设置指标的图例和单位等信息，其中，图例支持配置Pod的Namepace，ip，label等信息，在面板的Legend中可以配置这些支持的图例。 "},{"title":"导入预定义默认大盘​","type":1,"pageTitle":"KubeSkoop exporter 可视化配置","url":"/docs/guide/exporter/exporter-visualization-guide#导入预定义默认大盘","content":"KubeSkoop exporter提供跟随版本更新的默认Grafana大盘配置文件: curl https://raw.githubusercontent.com/alibaba/kubeskoop/main/deploy/resource/kubeskoop-exporter-dashboard.json -o dashboard.json  登陆Grafana控制台后，点击Dashboards-&gt;Import-&gt;Upload JSON file，选择保存好的文件上传后，选取prometheus作为数据源，点击Import导入，即可查看到默认大盘。通过选取不同的面板组，可以查看到不同类别的监控指标信息:  "},{"title":"使用 Grafana & Loki 查看可视化的网络事件​","type":1,"pageTitle":"KubeSkoop exporter 可视化配置","url":"/docs/guide/exporter/exporter-visualization-guide#使用-grafana--loki-查看可视化的网络事件","content":""},{"title":"安装 Grafana Loki​","type":1,"pageTitle":"KubeSkoop exporter 可视化配置","url":"/docs/guide/exporter/exporter-visualization-guide#安装-grafana-loki","content":"按照官方文档进行不同场景下的 Grafana Loki的安装。 安装完成后，可以通过以下方式检查Grafana Loki的可用性: curl http://[Grafana Loki实例的地址]:3100/ready  "},{"title":"配置kubeskoopp exporter事件流​","type":1,"pageTitle":"KubeSkoop exporter 可视化配置","url":"/docs/guide/exporter/exporter-visualization-guide#配置kubeskoopp-exporter事件流","content":"通过Grafana​ 通过Grafana可以将KubeSkoop exporter推送到Grafana Loki的事件进行可视化，通过以下步骤可以实现实现可视化操作： 点击Configuration-&gt;Data sources-&gt;Add data source后选择Loki，将Grafana Loki服务的地址添加到Grafana的数据源订阅中，可以是ip地址和域名，默认端口为3100：新建一个大盘，或者在已有大盘中选择新建一个面板，在面板的配置中选取数据源为1中配置的数据源，并在Label browser中过滤需要的事件信息：在事件面板中，可以通过LogQL查询特定的事件，点击事件后，可以看到详细的现场信息: "},{"title":"Intro","type":0,"sectionRef":"#","url":"/docs/guide/intro","content":"","keywords":""},{"title":"Connectivity diagnose​","type":1,"pageTitle":"Intro","url":"/docs/guide/intro#connectivity-diagnose","content":""},{"title":"Monitoring​","type":1,"pageTitle":"Intro","url":"/docs/guide/intro#monitoring","content":""},{"title":"Intro","type":0,"sectionRef":"#","url":"/docs/intro","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Intro","url":"/docs/intro#overview","content":"KubeSkoop is a kubernetes networking diagnose tool for different CNI plug-ins and IAAS providers. KubeSkoop automatic construct network traffic graph of Pod in the Kubernetes cluster, monitoring and analysis of the kernel's critical path by eBPF, to resolve most of Kubernetes cluster network problems. Significantly simplifies the difficulty of diagnosing Kubernetes networking issues. "},{"title":"Key Features​","type":1,"pageTitle":"Intro","url":"/docs/intro#key-features","content":""},{"title":"One-Shot Diagnose​","type":1,"pageTitle":"Intro","url":"/docs/intro#one-shot-diagnose","content":"Diagnose in-cluster traffic between Pod,Service,Node and Ingress/Egress Traffic.Cover whole linux network stack: Socket,Bridge,Veth,Netfilter,sysctls…Support IAAS network probe for cloud providers. "},{"title":"In-Depth Kernel Monitor​","type":1,"pageTitle":"Intro","url":"/docs/intro#in-depth-kernel-monitor","content":"eBPF seamless kernel monitorCO-RE scripts on series kernel by BTFexport metrics to standard Prometheus metric API "},{"title":"Network Anomaly Event​","type":1,"pageTitle":"Intro","url":"/docs/intro#network-anomaly-event","content":"support dozens of anomy scenes recognitionexport anomy event to Grafana Loki Contributing Feel free to open issues and pull requests. Any feedback is much appreciated! Contact DingTalk Group ID(26720020148) License Most source code in KubeSkoop which running on userspace are licensed under the Apache License, Version 2.0. The BPF code in /bpf directory are licensed under the GPL v2.0 to compat with Linux kernel helper functions. "},{"title":"KubeSkoop exporter 功能简介","type":0,"sectionRef":"#","url":"/docs/guide/exporter/exporter-description","content":"","keywords":""},{"title":"概述​","type":1,"pageTitle":"KubeSkoop exporter 功能简介","url":"/docs/guide/exporter/exporter-description#概述","content":"KubeSkoop exporter是面向Kubernetes云原生环境的网络监控工具，可以提供以下功能： 针对Pod级别的网络监控，包括流量，应用层连接信息，socket内存分配状态等针对Pod级别的网络异常状态的指标监控，例如Pod内进程对socket进行读写操作的等待时间超过100ms的次数，Pod发出TCP rst报文的次数等针对Pod级别的网络异常事件的现场，提供事件发生的详细信息的观测，例如内核网络软中断调度等待过久，UDP出现socket内存不足导致的溢出等 与常见的Kubernetes监控和可观测性工具的主要区别如下： 功能选项\tPrometheus Node exporter\tcAdvisor/Metric API\tKubeSkoop exporter按照Pod区分\tNo\tYes\tYes 网络状态监控\tYes\tNo\tYes 异常事件的现场捕获\tNo\tNo\tYes 内核网络高阶信息\tNo\tYes\tYes "},{"title":"核心原理​","type":1,"pageTitle":"KubeSkoop exporter 功能简介","url":"/docs/guide/exporter/exporter-description#核心原理","content":""},{"title":"架构​","type":1,"pageTitle":"KubeSkoop exporter 功能简介","url":"/docs/guide/exporter/exporter-description#架构","content":" "},{"title":"信息采集​","type":1,"pageTitle":"KubeSkoop exporter 功能简介","url":"/docs/guide/exporter/exporter-description#信息采集","content":"KubeSkoop exporter提供了适配于Kubernetes网络监控功能，在节点上，KubeSkoop exporter采集并归类了网络相关的大量数据，实现这些功能的核心原理包括: 通过CRI接口和Linux /proc/获取节点内的网络隔离状态及其与Pod的关联信息通过Linux /proc/，Linux netlink和eBPF获取网络监控信息通过eBPF获取操作系统内核在网络异常事件发生时的上下文状态 "},{"title":"聚合分析​","type":1,"pageTitle":"KubeSkoop exporter 功能简介","url":"/docs/guide/exporter/exporter-description#聚合分析","content":"KubeSkoop exporter采集的数据可以通过多种方式获取，包括: 通过Prometheus获取监控信息，并使用Grafana进行可视化操作通过配置Grafana Loki接收KubeSkoop exporter的事件推送，并使用Grafana进行可视化操作使用kubeskoop inspector命令行工具观察监控信息 关于如何将监控数据进行可视化，请参考KubeSkoop exporter 可视化配置 "},{"title":"指标信息​","type":1,"pageTitle":"KubeSkoop exporter 功能简介","url":"/docs/guide/exporter/exporter-description#指标信息","content":"KubeSkoop exporter 提供Pod级别的指标信息来反应实例运行过程中的环境变化，指标按照来源和用户，分类到不同的探针他们的相关信息如下: Name\tDescription\tGranularity\tDatasourcenetdev\tExposes network interfaces statistics from /proc/net/snmp.\tpod\tprocfs io\tExposes process io syscall statistics from /proc/io.\tpod\tprocfs tcp\tExpose tcp basic statistics from /proc/net/tcp\tpod\tprocfs softnet\tExpose softnet statistics from /proc/net/softnet\tpod\tprocfs sock\tExpose sock alloc/memory usage statistics\tpod\tprocfs tcpext\tExpose tcp extended statistics from /proc/net/netstat\tpod\tprocfs udp\tExpose udp basic statistics from /proc/net/snmp\tpod\tprocfs tcpsummary\tExpose tcp diagnosis information\tpod\tnetlink ip\tExpose layer3 ip basic statistics from /proc/net/snmp\tpod\tprocfs socketlatency\tLatency statistics of processing syscall with socket\tpod\teBPF net_softirq\tNetwork softirq schedule and processing latency statistic\tnode\teBPF virtcmdlatency\tVirtio-net command processing latency statistic\tnode\teBPF kernellatency\tLatency statistics of processing network packet in kernel stack\tpod\teBPF netiftxlat\tNetwork interfaces tc qdisc processing latency statistic\tpod\teBPF packetloss\tStatistics of packet dropping in kernel stack processing\tpod\teBPF "},{"title":"网络异常事件信息​","type":1,"pageTitle":"KubeSkoop exporter 功能简介","url":"/docs/guide/exporter/exporter-description#网络异常事件信息","content":"KubeSkoop exporter 提供节点上发生的网络相关的异常事件，根据在长期处理网络问题中的经验，我们归纳了几种常见的网络疑难问题，他们往往在集群中以无法复现，偶然发生的方式干扰正常的业务，缺乏有效的定位手段，其中部分如下： 网络数据报文被丢弃引发的连接失败，响应超时等问题。网络数据处理耗时久引发的偶发性能问题。TCP，conntrack等状态机制异常引发的业务异常问题。 针对无法快速复现和难以获取现场的网络问题，KubeSkoop exporter提供了基于eBPF的操作系统内核上下文观测能力，在问题发生的现场捕获操作系统的实时状态，以事件日志的方式输出。 KubeSkoop exporter 内置支持的事件如下： Name\tDescriptionnetif_txlat\tExpose slow processing events in tc egress qdisc packetloss\tExpose packet dropping events in kernel stack processing net_softirq\tExpose NET_RX/NET_TX softirq schedule/processing delay socketlatency\tExpose high latency of operating socket from user process kernellatency\tExpose netfilter/route delay in kernel virtcmdlatency\tExpose high latency virtio-net command processing tcpreset\tExpose receiving/sending tcp segments with RST flag 在事件日志的信息中，可以查看到事件现场的相关信息，以tcp_reset探针为例，当出现有Pod收到了一个访问为止端口的正常报文时，KubeSkoop exporter会捕获以下事件信息: type=TCPRESET_NOSOCK pod=storage-monitor-5775dfdc77-fj767 namespace=kube-system protocol=TCP saddr=100.103.42.233 sport=443 daddr=10.1.17.188 dport=33488  事件中的信息如下： type表明出现了一次TCPRESET_NOSOCK类型的事件，这是tcpreset探针捕获的一种事件，他表明有访问为止端口的报文被本地发送RST报文拒绝，拒绝的原因是没有根据报文找到相应的socket，通常在NAT失效，如ipvs定时器超时等原因发生后，会伴随这个事件。pod/namespace是KubeSkoop exporter根据发送报文的网络命名空间，ip地址和网络设备序号进行匹配后关联给事件的Pod元信息。saddr/sport/daddr/dport是KubeSkoop exporter在内核获取到的异常报文的信息，随着事件的不同，这部分信息也会有差异，例如net_softirq探针的事件信息中没有ip地址，取而代之的是中断发生的CPU序号，产生的延迟时长等。 对于需要有效的操作系统内核堆栈信息的事件，可以通过配置开关来额外获取操作系统内核的协议栈信息，这会增加一定的消耗，从而获取到更加精准的现象，例如： type=PACKETLOSS pod=hostNetwork namespace=hostNetwork protocol=TCP saddr=10.1.17.172 sport=6443 daddr=10.1.17.176 dport=43018 stacktrace:skb_release_data+0xA3 __kfree_skb+0xE tcp_recvmsg+0x61D inet_recvmsg+0x58 sock_read_iter+0x92 new_sync_read+0xE8 vfs_read+0x89 ksys_read+0x5A  "},{"title":"Quick Start","type":0,"sectionRef":"#","url":"/docs/quick-start","content":"","keywords":""},{"title":"Kind of kubernetes network issues:​","type":1,"pageTitle":"Quick Start","url":"/docs/quick-start#kind-of-kubernetes-network-issues","content":"Persistent network failure Most of persistent network failure issue are misconfig of network stack, e.g. error iptables rule, misconfig of VM security group. KubeSkoop generates a traffic graph by analyzing the link of src-&gt;dst, and then performs rule verification and simulation on the nodes and edges on the graph to locate the network misconfiguration. Occasional network jitter Occasional packet delays, losses, and retransmissions in network links often lead to application jitter problems. Because they are sporadic, it is difficult to trace back and locate the root cause of the problem. KubeSkoop monitors the key path of the protocol stack in the kernel through eBPF in-depth, integrates multiple indicators to correlate typical jitter scenarios, and records and traces back to the root cause of network anomalies. Network performance bottlenecks Application network dependencies are usually associated with many network links, such as upstream and downstream services, DNS resolution, etc., and it is difficult to analyze the root cause when the performance cannot improve. KubeSkoop finds out key links that affect performance by analyzing application-related links and application-layer bottlenecks. "},{"title":"One-Shot diagnose persistent network failure​","type":1,"pageTitle":"Quick Start","url":"/docs/quick-start#one-shot-diagnose-persistent-network-failure","content":""},{"title":"Install KubeSkoop command​","type":1,"pageTitle":"Quick Start","url":"/docs/quick-start#install-kubeskoop-command","content":"Through go install to install KubeSkoop cli： go install github.com/alibaba/kubeskoop/cmd/kubeskoop  "},{"title":"One-Shot Diagnose​","type":1,"pageTitle":"Quick Start","url":"/docs/quick-start#one-shot-diagnose","content":"$ kubeskoop -s 172.18.0.4 -d 10.96.0.10 -p 53 --http # Execute the diagnostic command, specify the src,dst, and use --http to provide the diagnostic result through the local web service I0118 11:43:23.383446 6280 web.go:97] HTTP server listening on http://127.0.0.1:8080 # After the diagnosis is completed, a link to the diagnosis result will be output  Open the diagnosis result http://127.0.0.1:8080 through browser： "},{"title":"Monitor network jitter and bottlenecks​","type":1,"pageTitle":"Quick Start","url":"/docs/quick-start#monitor-network-jitter-and-bottlenecks","content":""},{"title":"Install monitor components​","type":1,"pageTitle":"Quick Start","url":"/docs/quick-start#install-monitor-components","content":"The Skoop exporter bundles with Prometheus, Grafana, and Loki can be quickly deployed in a Kubernetes cluster by following these steps: kubectl apply -f https://raw.githubusercontent.com/alibaba/kubeskoop/main/deploy/skoopbundle.yaml  Confirm that the installation is complete and obtain access through the following steps： # View the status of Skoop exporter kubectl get pod -n kubeskoop -l app=skoop-exporter -o wide # View the status of Probe collection probes kubectl get --raw /api/v1/namespaces/kubeskoop/pods/skoop-exporter-t4d9m:9102/proxy/status |jq . # Obtain the entrance of Prometheus service, which is exposed by NodePort by default kubectl get service -n kubeskoop prometheus-service -o wide # Obtain the access entry of the Grafana console, which is exposed by NodePort by default kubectl get service -n kubeskoop grafana -o wide  Note: skoopbundle.yaml starts with a minimal copy, not suitable for production environments "},{"title":"network performance analysis​","type":1,"pageTitle":"Quick Start","url":"/docs/quick-start#network-performance-analysis","content":"Open the NodePort Service of grafana on web browser, open the network monitoring page, and check the water level of each monitor item corresponding to the time point of the performance problem. For example： 具体指标说明参考文档: Kubeskoop exporter 功能简介  "},{"title":"network jitter & anomy event analysis​","type":1,"pageTitle":"Quick Start","url":"/docs/quick-start#network-jitter--anomy-event-analysis","content":"Open the NodePort Service of grafana on web browser, open the Loki page, check the events corresponding to the time point of network jitter and the water level corresponding to the network monitoring page. 具体指标说明参考文档: Kubeskoop exporter 功能简介  "},{"title":"安装 KubeSkoop exporter","type":0,"sectionRef":"#","url":"/docs/guide/exporter/exporter_installation","content":"","keywords":""},{"title":"安装依赖​","type":1,"pageTitle":"安装 KubeSkoop exporter","url":"/docs/guide/exporter/exporter_installation#安装依赖","content":"Linux kernel &gt;= 4.9.17 （在低版本内核上可以支持部分功能）基于Docker/Containerd/Pouch的容器运行时 "},{"title":"快速安装​","type":1,"pageTitle":"安装 KubeSkoop exporter","url":"/docs/guide/exporter/exporter_installation#快速安装","content":""},{"title":"快速体验KubeSkoop exporter功能​","type":1,"pageTitle":"安装 KubeSkoop exporter","url":"/docs/guide/exporter/exporter_installation#快速体验kubeskoop-exporter功能","content":"KubeSkoop exporter提供了一个可以快速部署的配置，包含以下组件： KubeSkoop exporter组件。单副本的Prometheus组件与Grafana组件，Grafana Loki组件。Prometheus和Grafana的NodePort服务。 通过以下步骤，可以在Kubernetes集群中快速部署KubeSkoop exporter及其与Prometheus，Grafana和Loki构成的可观测性组合： kubectl apply -f https://github.com/alibaba/kubeskoop/deploy/skoopbundle.yaml  通过以下步骤，确认安装完成以及获取访问入口： # 查看Skoop exporter的运行状态 kubectl get pod -n kubeskoop -l app=skoop-exporter -o wide # 查看Probe采集探针的运行状态 kubectl get --raw /api/v1/namespaces/{{skoop-exporter的pod namespace}}/pods/{{skoop-exporter的pod name}}:9102/proxy/status |jq . # 获取Prometheus服务的入口 kubectl get service -n kubeskoop prometheus-service -o wide # 获取Grafana控制台的访问入口 kubectl get service -n kubeskoop grafana -o wide  "},{"title":"仅安装KubeSkoop exporter​","type":1,"pageTitle":"安装 KubeSkoop exporter","url":"/docs/guide/exporter/exporter_installation#仅安装kubeskoop-exporter","content":"通过以下步骤，可以在Kubernetes集群中快速部署KubeSkoop exporter： kubectl apply -f https://github.com/alibaba/kubeskoop/deploy/kubeskoopexporter.yaml  "},{"title":"使用Helm安装​","type":1,"pageTitle":"安装 KubeSkoop exporter","url":"/docs/guide/exporter/exporter_installation#使用helm安装","content":"# 添加skoop charts repo helm repo add kubeskoop https://github.com/alibaba/kubeskoop/charts # 首次执行时，需要更新helm repo缓存 helm repo update # 安装skoop exporter helm install skoop-exporter kubeskoop/skoop-exporter  如果需要调试Helm Charts信息，可以通过本地安装： # 获取skoop exporter代码仓库 git clone https://github.com/alibaba/kubeskoop.git # 进行本地安装 helm install --set namespace=kube-system skoop-exporter ./kubeskoop/deploy/skoop-exporter-0.1.0.tgz --debug  Skoop-exporter以DeamonSet方式部署在集群中，可以通过以下方式验证是否正常工作： # 查看Skoop exporter的运行状态 kubectl get pod -n skoop -l app=skoop-exporter -o wide # 获取到pod的信息后，可以通过apiserver查看Probe采集探针的运行状态 kubectl get --raw /api/v1/namespaces/{{skoop-exporter的pod namespace}}/pods/{{skoop-exporter的pod name}}:9102/proxy/status |jq . # 如果可以直接访问skoop-exporter实例，也可以直接查看Probe的运行状态 curl {{skoop-exporter的pod ip}}:9102/status |jq .  "},{"title":"Helm配置​","type":1,"pageTitle":"安装 KubeSkoop exporter","url":"/docs/guide/exporter/exporter_installation#helm配置","content":"通过helm安装KubeSkoop exporter时，可以配置的参数如下： 配置项\t配置说明\t默认配置name\tKubeSkoop exporter的组件名称\tskoop-exporter namespace\tKubeSkoop exporter的命名空间\tkubeskoop debugmode\t调试模式的开关，打开调试模式后，可以获得更详细的日志以及开启pprof和gops接口\tfalse config.enableEventServer\t事件采集服务的开关\tfalse config.enableMetricServer\t监控指标服务的开关\ttrue config.remoteLokiAddress\t开启事件采集服务后，通过这个选项配置需要推送事件的Grafana Loki服务地址\t`` config.metricLabelVerbose\t获取更加详细的监控指标标签，包括Pod的app标签，ip地址等\tfalse config.metricServerPort\t监控指标服务的端口，提供http服务\t9102 config.eventServerPort\tKubeSkoop exporter的GRPC服务端口，提供事件流服务\t19102 config.metricProbes\t配置开启的监控指标探针 config.eventProbes\t配置开启的事件采集探针 config.metricCacheInterval\t监控指标的采集缓存周期，单位为秒\t15 "},{"title":"安装完成校验​","type":1,"pageTitle":"安装 KubeSkoop exporter","url":"/docs/guide/exporter/exporter_installation#安装完成校验","content":"通过helm方式完成KubeSkoop exporter的安装后，可以通过以下方式验证是否正常运行: # 查看Probe采集探针的运行状态 kubectl get --raw /api/v1/namespaces/{{KubeSkoop exporter的pod namespace}}/pods/{{KubeSkoop exporter的pod name}}:9102/proxy/status |jq .  "},{"title":"配置​","type":1,"pageTitle":"安装 KubeSkoop exporter","url":"/docs/guide/exporter/exporter_installation#配置","content":"KubeSkoop exporter的配置是默认由与workload相同命名空间下的ConfigMap对象inspector-config进行管理，通过以下方式可以进行修改： # 修改命名空间为实际生效的命名空间 kubectl edit cm -n kubeskoop inspector-config  KubeSkoop exporter支持的配置项如下: 配置项\t配置功能\t默认值debugmode\t调试模式的开关，打开调试模式后，可以获得更详细的日志以及开启pprof和gops接口\tfalse event_config.loki_enable\t事件采集服务推向给Grafana Loki的开关\tfalse event_config.loki_address\t开启事件采集服务后，通过这个选项配置需要推送事件的Grafana Loki服务地址\t`` event_config.probes\t配置开启的事件采集探针 event_config.port\tKubeSkoop exporter的GRPC服务端口，提供事件流服务\t19102 metric_config.verbose\t获取更加详细的监控指标标签，包括Pod的app标签，ip地址等\tfalse metric_config.port\t监控指标服务的端口，提供http服务\t9102 metric_config.probes\t配置开启的监控指标探针 metric_config.interval\t监控指标的采集缓存周期，单位为秒\t15 可以选择配置的探针信息可以参考KubeSkoop exporter 功能简介 "}]
"use strict";(self.webpackChunkkubeskoop_io=self.webpackChunkkubeskoop_io||[]).push([[2418],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>k});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=o.createContext({}),d=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=d(e.components);return o.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(t),m=r,k=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return t?o.createElement(k,a(a({ref:n},s),{},{components:t})):o.createElement(k,a({ref:n},s))}));function k(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=m;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var d=2;d<i;d++)a[d]=t[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2026:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=t(7462),r=(t(7294),t(3905));const i={sidebar_position:2},a="Add a new plugin",l={unversionedId:"contribute/diagnose/new-plugin",id:"contribute/diagnose/new-plugin",title:"Add a new plugin",description:"This section explains how to add a new plugin to KubeSkoop diagnose.",source:"@site/docs/contribute/diagnose/new-plugin.md",sourceDirName:"contribute/diagnose",slug:"/contribute/diagnose/new-plugin",permalink:"/docs/contribute/diagnose/new-plugin",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/docs/contribute/diagnose/architecture"},next:{title:"Add a new cloud provider",permalink:"/docs/contribute/diagnose/new-cloud-provider"}},p={},d=[{value:"Implement <code>Plugin</code>",id:"implement-plugin",level:2},{value:"Implement <code>Network</code>",id:"implement-network",level:2},{value:"Add new plugin type and create it in <code>Provider</code>",id:"add-new-plugin-type-and-create-it-in-provider",level:2},{value:"Add plugin auto detection",id:"add-plugin-auto-detection",level:2},{value:"Add e2e tests",id:"add-e2e-tests",level:2}],s={toc:d},c="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(c,(0,o.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"add-a-new-plugin"},"Add a new plugin"),(0,r.kt)("p",null,"This section explains how to add a new plugin to KubeSkoop diagnose."),(0,r.kt)("h2",{id:"implement-plugin"},"Implement ",(0,r.kt)("inlineCode",{parentName:"h2"},"Plugin")),(0,r.kt)("p",null,"All plugins are located in ",(0,r.kt)("inlineCode",{parentName:"p"},"pkg/skoop/plugin"),"."),(0,r.kt)("p",null,"A plugin should implement interface ",(0,r.kt)("inlineCode",{parentName:"p"},"Plugin"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Plugin interface {\n    CreatePod(pod *k8s.Pod) (model.NetNodeAction, error)\n    CreateNode(node *k8s.NodeInfo) (model.NetNodeAction, error)\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"CreatePod()"),": accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"*k8s.Pod")," and creates pod implementation as ",(0,r.kt)("inlineCode",{parentName:"p"},"NetNodeAction"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"CreateNode()"),": accepts ",(0,r.kt)("inlineCode",{parentName:"p"},"*k8s.NodeInfo")," and creates node implementation as ",(0,r.kt)("inlineCode",{parentName:"p"},"NetNodeAction")))),(0,r.kt)("p",null,"You should provide implementations for pod and node based on your plugin."),(0,r.kt)("p",null,"The definition of ",(0,r.kt)("inlineCode",{parentName:"p"},"NetNodeAction")," is as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type NetNodeAction interface {\n    Send(dst Endpoint, protocol Protocol) ([]Transmission, error)\n    Receive(upstream *Link) ([]Transmission, error)\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Send()")," represents the operation of sending a packet from the node. It accepts destination endpoint and protocol, and returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[]Transmission")," as the result."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Receive()")," represents the operation of receiving a packet on the node. It accepts upstream as ",(0,r.kt)("inlineCode",{parentName:"li"},"*Link"),", and returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[]Transmission")," as the result.")),(0,r.kt)("p",null,"It's quite common to use veth pair as the network interface of pod. In this case, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"simpleVethPod")," as implementation of pod by ",(0,r.kt)("inlineCode",{parentName:"p"},"newSimpleVethPod()"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func (f *flannelPlugin) CreatePod(pod *k8s.Pod) (model.NetNodeAction, error) {\n    return newSimpleVEthPod(pod, f.ipCache, f.podMTU, "eth0")\n}\n')),(0,r.kt)("p",null,"For node implementations, you may have to determine the type of an Endpoint (Pod, Node, Service, or External).  For general, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"BasePluginNode")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"NetNodeAction"),", and implement ",(0,r.kt)("inlineCode",{parentName:"p"},"SimplePluginNode")," for it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type SimplePluginNode interface {\n    ToPod(upstream *model.Link, dst model.Endpoint, protocol model.Protocol, pod *v1.Pod) ([]model.Transmission, error)\n    ToHost(upstream *model.Link, dst model.Endpoint, protocol model.Protocol, node *v1.Node) ([]model.Transmission, error)\n    ToService(upstream *model.Link, dst model.Endpoint, protocol model.Protocol, service *v1.Service) ([]model.Transmission, error)\n    ToExternal(upstream *model.Link, dst model.Endpoint, protocol model.Protocol) ([]model.Transmission, error)\n    Serve(upstream *model.Link, dst model.Endpoint, protocol model.Protocol) ([]model.Transmission, error)\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SimplePluginNode")," has already classified actions according to endpoint types. Take Flannel plugin as an example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func (f *flannelPlugin) CreateNode(node *k8s.NodeInfo) (model.NetNodeAction, error) {\n    flannelHost, err := newFlannelHost(f.ipCache, node, f.infraShim, f.serviceProcessor, f.hostOptions)\n    if err != nil {\n        return nil, err\n    }\n    return &BasePluginNode{\n        NetNode:          flannelHost.netNode,\n        IPCache:          f.ipCache,\n        SimplePluginNode: flannelHost,\n    }, nil\n}\n")),(0,r.kt)("p",null,"During implementation, you may need to use utilities such as ",(0,r.kt)("inlineCode",{parentName:"p"},"IPCache")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NetstackAssertion")," to help you get the information of a resource, or check its network configuration. For more details, you can refer to the implementation of the Flannel plugin in ",(0,r.kt)("inlineCode",{parentName:"p"},"pkg/skoop/plugin/flannel.go"),"."),(0,r.kt)("p",null,"If you want to add any flags for your plugin, you should implement ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfigBinder"),", and register it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'type CalicoConfig struct {\n    PodMTU     int\n    IPIPPodMTU int\n    Interface  string\n}\n\nfunc (c *CalicoConfig) BindFlags(fs *pflag.FlagSet) {\n    fs.StringVarP(&c.Interface, "calico-host-interface", "", "eth0",\n        "Host interface for calico plugin.")\n    fs.IntVarP(&c.PodMTU, "calico-pod-mtu", "", 1500,\n        "Pod MTU for calico plugin. Pod interface MTU in BGP mode.")\n    fs.IntVarP(&c.IPIPPodMTU, "calico-ipip-pod-mtu", "", 1480,\n        "Pod MTU for calico plugin. Pod interface MTU in IPIP mode.")\n}\n\nfunc (c *CalicoConfig) Validate() error {\n    return nil\n}\n\nvar Calico = &CalicoConfig{}\n\nfunc init() {\n    ctx.RegisterConfigBinder("Calico plugin", Calico)\n}\n')),(0,r.kt)("h2",{id:"implement-network"},"Implement ",(0,r.kt)("inlineCode",{parentName:"h2"},"Network")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Network")," are located in ",(0,r.kt)("inlineCode",{parentName:"p"},"pkg/skoop/network"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"type Network interface {\n    Diagnose(ctx *ctx.Context, src model.Endpoint, dst model.Endpoint) ([]model.Suspicion, *model.PacketPath, error)\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Diagnose()"),": accepts ",(0,r.kt)("inlineCode",{parentName:"li"},"*ctx.Context"),", source and destination as ",(0,r.kt)("inlineCode",{parentName:"li"},"*model.Endpoint"),". Returns ",(0,r.kt)("inlineCode",{parentName:"li"},"[]model.Suspicion")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"*model.PacketPath"),".")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Network")," are cloud provider specified, and these implementations are located in ",(0,r.kt)("inlineCode",{parentName:"p"},"pkg/skoop/network/<provider name>/"),"."),(0,r.kt)("p",null,"If your plugins are supported on this provider, you should add ",(0,r.kt)("inlineCode",{parentName:"p"},"Network"),"implementation for it. Network type ",(0,r.kt)("inlineCode",{parentName:"p"},"generic")," stands for any cloud provider, so you should at least include your plugin's ",(0,r.kt)("inlineCode",{parentName:"p"},"Network")," implementation in it."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Plugin"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"NetNodeManager"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"NetworkPolicy"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"service.Processor")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Diagnostor")," are configured during the creation of ",(0,r.kt)("inlineCode",{parentName:"p"},"Network"),".  For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},"func NewFlannelNetwork(ctx *ctx.Context) (network.Network, error) {\n    serviceProcessor := service.NewKubeProxyServiceProcessor(ctx)\n\n    plgn, err := plugin.NewFlannelPlugin(ctx, serviceProcessor, nil)\n    if err != nil {\n        return nil, err\n    }\n\n    collectorManager, err := manager.NewSimplePodCollectorManager(ctx)\n    if err != nil {\n        return nil, err\n    }\n\n    netNodeManager, err := nodemanager.NewNetNodeManager(ctx, plgn, collectorManager)\n    if err != nil {\n        return nil, err\n    }\n\n    networkPolicy, err := plugin.NewNetworkPolicy(false, false, ctx.ClusterConfig().IPCache, ctx.KubernetesClient(), serviceProcessor)\n    if err != nil {\n        return nil, err\n    }\n\n    diagnostor, err := skoop.NewDefaultDiagnostor(ctx, netNodeManager, networkPolicy)\n    if err != nil {\n        return nil, err\n    }\n\n    return &flannelNetwork{\n        plugin:           plgn,\n        diagnostor:       diagnostor,\n        collectorManager: collectorManager,\n        netNodeManager:   netNodeManager,\n    }, nil\n}\n")),(0,r.kt)("h2",{id:"add-new-plugin-type-and-create-it-in-provider"},"Add new plugin type and create it in ",(0,r.kt)("inlineCode",{parentName:"h2"},"Provider")),(0,r.kt)("p",null,"Plugin types are defined in ",(0,r.kt)("inlineCode",{parentName:"p"},"pkg/skoop/context/cluster.go"),". You should add a new type here."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'const (\n    NetworkPluginFlannel  = "flannel"\n    NetworkPluginCalico   = "calico"\n    NetworkPluginTerway   = "terway"\n    // add your new plugin type here\n)\n')),(0,r.kt)("p",null,"After this, you also need to create your plugin in supported cloud providers at ",(0,r.kt)("inlineCode",{parentName:"p"},"pkg/skoop/provider/<provider name>.go"),". For example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func (g genericProvider) CreateNetwork(ctx *context.Context) (network.Network, error) {\n    switch ctx.ClusterConfig().NetworkPlugin {\n    case context.NetworkPluginFlannel:\n        return generic.NewFlannelNetwork(ctx)\n    case context.NetworkPluginCalico:\n        return generic.NewCalicoNetwork(ctx)\n    // add your plugin type\n    default:\n        return nil, fmt.Errorf("not support cni type %q", ctx.ClusterConfig().NetworkPlugin)\n    }\n}\n')),(0,r.kt)("p",null,"Now, you can make your plugin work by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"--network plugin <your plugin name>")," to the CLI command."),(0,r.kt)("h2",{id:"add-plugin-auto-detection"},"Add plugin auto detection"),(0,r.kt)("p",null,"You can add plugin auto detection in",(0,r.kt)("inlineCode",{parentName:"p"},"DetectNetworkPlugin()")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"pkg/utils/k8s.go")," by listing the DaemonSet in the cluster."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func DetectNetworkPlugin(k8sCli *kubernetes.Clientset) (networkMode string, err error) {\n    dss, err := k8sCli.AppsV1().DaemonSets("").List(context.Background(), metav1.ListOptions{})\n    if err != nil {\n        return "", err\n    }\n    for _, ds := range dss.Items {\n        switch ds.Name {\n        case "kube-flannel-ds":\n            return "flannel", nil\n        case "calico-node":\n            return "calico", nil\n        case "terway-eniip":\n            return "terway-eniip", nil\n        }\n    }\n    return "", nil\n}\n')),(0,r.kt)("h2",{id:"add-e2e-tests"},"Add e2e tests"),(0,r.kt)("p",null,"Finally, you should add plugin specific tests in ",(0,r.kt)("inlineCode",{parentName:"p"},"test/skoop/e2e/testcase/plugins.go"),", and add your plugin to ",(0,r.kt)("inlineCode",{parentName:"p"},"test/skoop/e2e/testcase/testcases.go"),"."))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunkkubeskoop_io=self.webpackChunkkubeskoop_io||[]).push([[7306],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>k});var r=n(7294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},l=Object.keys(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(r=0;r<l.length;r++)n=l[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var d=r.createContext({}),p=function(t){var e=r.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=p(t.components);return r.createElement(d.Provider,{value:e},t.children)},u="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},s=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,l=t.originalType,d=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),u=p(n),s=a,k=u["".concat(d,".").concat(s)]||u[s]||c[s]||l;return n?r.createElement(k,i(i({ref:e},m),{},{components:n})):r.createElement(k,i({ref:e},m))}));function k(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o[u]="string"==typeof t?t:a,i[1]=o;for(var p=2;p<l;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}s.displayName="MDXCreateElement"},5087:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>l,metadata:()=>o,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const l={sidebar_position:3},i="Command line arguments",o={unversionedId:"reference/connectivity-diagnosis/command-line-arguments",id:"reference/connectivity-diagnosis/command-line-arguments",title:"Command line arguments",description:"The following command line arguments are provided by kubeskoop cli.",source:"@site/docs/reference/connectivity-diagnosis/command-line-arguments.md",sourceDirName:"reference/connectivity-diagnosis",slug:"/reference/connectivity-diagnosis/command-line-arguments",permalink:"/docs/reference/connectivity-diagnosis/command-line-arguments",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Specifying Cloud Provider",permalink:"/docs/reference/connectivity-diagnosis/cloud-providers"},next:{title:"Monitoring",permalink:"/docs/category/monitoring-1"}},d={},p=[],m={toc:p},u="wrapper";function c(t){let{components:e,...n}=t;return(0,a.kt)(u,(0,r.Z)({},m,n,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"command-line-arguments"},"Command line arguments"),(0,a.kt)("p",null,"The following command line arguments are provided by kubeskoop cli."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Argument"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"-p, --dport uint16")),(0,a.kt)("td",{parentName:"tr",align:null},"Destination port for the network problem.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"-d, --dst string")),(0,a.kt)("td",{parentName:"tr",align:null},"Destination address for the network problem.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--protocol string")),(0,a.kt)("td",{parentName:"tr",align:null},"Protocol for the network problem. (default ",(0,a.kt)("inlineCode",{parentName:"td"},"tcp"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"-s, --src string")),(0,a.kt)("td",{parentName:"tr",align:null},"Source address for the network problem.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--cloud-provider string")),(0,a.kt)("td",{parentName:"tr",align:null},"Cloud provider of cluster. (default ",(0,a.kt)("inlineCode",{parentName:"td"},"generic"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--cluster-cidr string")),(0,a.kt)("td",{parentName:"tr",align:null},"Cluster pod CIDR. If not set, will try to detect it automatically.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--kube-config string")),(0,a.kt)("td",{parentName:"tr",align:null},"Cluster kubeconfig file. (default ",(0,a.kt)("inlineCode",{parentName:"td"},"~/.kube/config"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--network-plugin string")),(0,a.kt)("td",{parentName:"tr",align:null},"Network plugin used in cluster. If not set, will try to auto detect it.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--proxy-mode string")),(0,a.kt)("td",{parentName:"tr",align:null},"Proxy mode for kube-proxy. If not set, will try to detect it automatically.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--format string")),(0,a.kt)("td",{parentName:"tr",align:null},"Output format of diagnose result, support d2/svg/json. If not set, only print simple path info on console.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--http")),(0,a.kt)("td",{parentName:"tr",align:null},"Enable an http server to show diagnose result.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--http-address string")),(0,a.kt)("td",{parentName:"tr",align:null},"Listen address for http server. (default ",(0,a.kt)("inlineCode",{parentName:"td"},"127.0.0.1:8080"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--output string")),(0,a.kt)("td",{parentName:"tr",align:null},"Output file name, default is output.d2/svg/json in current work directory.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--aliyun-access-key-id string")),(0,a.kt)("td",{parentName:"tr",align:null},"Aliyun access key.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--aliyun-access-key-secret string")),(0,a.kt)("td",{parentName:"tr",align:null},"Aliyun access secret.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--aliyun-security-token string")),(0,a.kt)("td",{parentName:"tr",align:null},"Aliyun security token (optional).")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--collector-image string")),(0,a.kt)("td",{parentName:"tr",align:null},"Image used for collector. (default ",(0,a.kt)("inlineCode",{parentName:"td"},"kubeskoop/kubeskoop:<version>"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--collector-namespace string")),(0,a.kt)("td",{parentName:"tr",align:null},"Namespace where collector pods in. (default ",(0,a.kt)("inlineCode",{parentName:"td"},"skoop"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--collector-pod-wait-interval duration")),(0,a.kt)("td",{parentName:"tr",align:null},"Collector pod running check interval. (default 2s)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--collector-pod-wait-timeout duration")),(0,a.kt)("td",{parentName:"tr",align:null},"Collector pod running check timeout. (default 2m0s)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--calico-host-interface string")),(0,a.kt)("td",{parentName:"tr",align:null},"Host interface for calico plugin. (default ",(0,a.kt)("inlineCode",{parentName:"td"},"eth0"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--calico-ipip-pod-mtu int")),(0,a.kt)("td",{parentName:"tr",align:null},"Pod MTU for calico plugin. Pod interface MTU in IPIP mode. (default 1480)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--calico-pod-mtu int")),(0,a.kt)("td",{parentName:"tr",align:null},"Pod MTU for calico plugin. Pod interface MTU in BGP mode. (default 1500)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--flannel-backend-type string")),(0,a.kt)("td",{parentName:"tr",align:null},"Backend type for flannel plugin, support host-gw,vxlan,alloc. If not set, it will auto detect from flannel config.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--flannel-bridge string")),(0,a.kt)("td",{parentName:"tr",align:null},"Bridge name for flannel plugin. (default ",(0,a.kt)("inlineCode",{parentName:"td"},"cni0"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--flannel-host-interface string")),(0,a.kt)("td",{parentName:"tr",align:null},"Host interface for flannel plugin. (default ",(0,a.kt)("inlineCode",{parentName:"td"},"eth0"),")")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--flannel-ip-masq")),(0,a.kt)("td",{parentName:"tr",align:null},"Should do IP masquerade for flannel plugin. (default true)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"--flannel-pod-mtu int")),(0,a.kt)("td",{parentName:"tr",align:null},"Pod MTU for flannel plugin. If not set, it will auto detect from flannel cni mode (1450 for vxlan, 1500 for others).")))))}c.isMDXComponent=!0}}]);